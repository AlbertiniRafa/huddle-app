// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  phone         String?   @unique
  name          String
  profilePhoto  String?
  bio           String?
  country       String    @default("UK")
  locale        String    @default("en-GB")
  timezone      String    @default("Europe/London")
  verified      Boolean   @default(false)
  createdAt     DateTime  @default(now())
  lastSeen      DateTime  @default(now())
  
  // Location data
  latitude      Float?
  longitude     Float?
  locationSharing String  @default("coarse") // "exact", "coarse", "none"
  
  // Auth
  password      String?
  
  // Relations
  profiles      Profile[]
  interests     UserInterest[]
  bookings      Booking[]
  sentMessages  Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  matchesA      Match[] @relation("UserA")
  matchesB      Match[] @relation("UserB")
  reports       Report[] @relation("Reporter")
  reportedBy    Report[] @relation("Reported")
  rewards       RewardLedger[]
  
  // Social Media Relations
  posts            Post[]
  likes            Like[]
  comments         Comment[]
  chatThreads      ThreadParticipant[]
  sentChatMessages ChatMessage[] @relation("SentChatMessages")

  // Seller relation
  sellerProfile Seller?
  
  @@map("users")
}

model Profile {
  id          String   @id @default(cuid())
  userId      String
  displayName String
  role        String   // "parent", "member"
  isPrimary   Boolean  @default(false)
  createdAt   DateTime @default(now())
  
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  familyMembers FamilyMember[]
  
  @@map("profiles")
}

model FamilyMember {
  id            String   @id @default(cuid())
  profileId     String
  name          String
  dateOfBirth   DateTime?
  age           Int?
  relation      String   // "child", "spouse", "partner"
  gender        String?
  allergies     String?
  notes         String?
  consentStatus String   @default("pending") // "pending", "granted", "denied"
  createdAt     DateTime @default(now())
  
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  
  @@map("family_members")
}

model Interest {
  id       String @id @default(cuid())
  name     String @unique
  category String
  tags     String[]
  
  userInterests UserInterest[]
  venues        VenueInterest[]
  events        EventInterest[]
  deals         DealInterest[]
  
  @@map("interests")
}

model UserInterest {
  id         String @id @default(cuid())
  userId     String
  interestId String
  skillLevel String @default("beginner") // "beginner", "intermediate", "advanced", "pro"
  frequency  String @default("occasional") // "daily", "weekly", "monthly", "occasional"
  
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  interest Interest @relation(fields: [interestId], references: [id], onDelete: Cascade)
  
  @@unique([userId, interestId])
  @@map("user_interests")
}

model Venue {
  id              String   @id @default(cuid())
  name            String
  type            String   // "club", "hotel", "pool", "court", "gym"
  latitude        Float
  longitude       Float
  address         String
  contactInfo     Json?
  hours           Json?
  sportsSupported String[]
  createdBySeller String?
  createdAt       DateTime @default(now())
  
  seller    Seller?         @relation(fields: [createdBySeller], references: [id])
  posts     Post[]
  events    Event[]
  interests VenueInterest[]
  
  @@map("venues")
}

model VenueInterest {
  id        String @id @default(cuid())
  venueId   String
  interestId String
  
  venue    Venue    @relation(fields: [venueId], references: [id], onDelete: Cascade)
  interest Interest @relation(fields: [interestId], references: [id], onDelete: Cascade)
  
  @@unique([venueId, interestId])
  @@map("venue_interests")
}

model Event {
  id          String   @id @default(cuid())
  venueId     String?
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  capacity    Int?
  price       Float?
  currency    String   @default("GBP")
  bookingUrl  String?
  externalId  String?
  createdAt   DateTime @default(now())
  
  venue     Venue?          @relation(fields: [venueId], references: [id])
  bookings  Booking[]
  interests EventInterest[]
  
  @@map("events")
}

model EventInterest {
  id        String @id @default(cuid())
  eventId   String
  interestId String
  
  event    Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  interest Interest @relation(fields: [interestId], references: [id], onDelete: Cascade)
  
  @@unique([eventId, interestId])
  @@map("event_interests")
}

model Seller {
  id               String   @id @default(cuid())
  businessName     String
  contactUserId    String   @unique
  verificationStatus String @default("pending") // "pending", "verified", "rejected"
  categories       String[]
  commissionRate   Float    @default(0.1)
  createdAt        DateTime @default(now())
  
  contactUser User    @relation(fields: [contactUserId], references: [id])
  venues      Venue[]
  deals       Deal[]
  posts       Post[]
  
  @@map("sellers")
}

model Deal {
  id            String   @id @default(cuid())
  sellerId      String
  title         String
  description   String
  price         Float
  originalPrice Float?
  discount      Float?
  currency      String   @default("GBP")
  bookingUrl    String?
  inventoryCount Int?
  startDate     DateTime
  endDate       DateTime
  createdAt     DateTime @default(now())
  
  seller    Seller         @relation(fields: [sellerId], references: [id])
  bookings  Booking[]
  interests DealInterest[]
  
  @@map("deals")
}

model DealInterest {
  id        String @id @default(cuid())
  dealId    String
  interestId String
  
  deal     Deal     @relation(fields: [dealId], references: [id], onDelete: Cascade)
  interest Interest @relation(fields: [interestId], references: [id], onDelete: Cascade)
  
  @@unique([dealId, interestId])
  @@map("deal_interests")
}

model Booking {
  id                String   @id @default(cuid())
  userId            String
  eventId           String?
  dealId            String?
  status            String   @default("pending") // "pending", "confirmed", "cancelled", "completed"
  amount            Float
  currency          String   @default("GBP")
  paymentProviderId String?
  pointsAwarded     Int      @default(0)
  createdAt         DateTime @default(now())
  
  user  User   @relation(fields: [userId], references: [id])
  event Event? @relation(fields: [eventId], references: [id])
  deal  Deal?  @relation(fields: [dealId], references: [id])
  
  @@map("bookings")
}

model Match {
  id              String   @id @default(cuid())
  userAId         String
  userBId         String
  matchScore      Float
  commonInterests String[]
  lastContacted   DateTime?
  status          String   @default("active") // "active", "blocked", "expired"
  createdAt       DateTime @default(now())
  
  userA User @relation("UserA", fields: [userAId], references: [id])
  userB User @relation("UserB", fields: [userBId], references: [id])
  
  @@unique([userAId, userBId])
  @@map("matches")
}

model Message {
  id          String   @id @default(cuid())
  threadId    String
  senderId    String
  recipientId String
  content     String
  attachments Json?
  createdAt   DateTime @default(now())
  
  sender    User @relation("SentMessages", fields: [senderId], references: [id])
  recipient User @relation("ReceivedMessages", fields: [recipientId], references: [id])
  
  @@map("messages")
}

model RewardLedger {
  id              String   @id @default(cuid())
  userId          String
  points          Int
  reason          String
  referenceId     String?  // booking_id or other reference
  balanceSnapshot Int
  createdAt       DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id])
  
  @@map("reward_ledger")
}

model Report {
  id           String   @id @default(cuid())
  reporterId   String
  reportedId   String
  targetType   String   // "user", "event", "message"
  reason       String
  description  String?
  status       String   @default("pending") // "pending", "reviewed", "resolved", "dismissed"
  actionsTaken Json?
  createdAt    DateTime @default(now())
  
  reporter User @relation("Reporter", fields: [reporterId], references: [id])
  reported User @relation("Reported", fields: [reportedId], references: [id])
  
  @@map("reports")
}

// Social Media Features
model Post {
  id          String   @id @default(cuid())
  userId      String
  content     String
  images      String[]
  type        String   // "activity", "product", "trip", "facility", "general"
  location    String?
  latitude    Float?
  longitude   Float?
  tags        String[]
  venueId     String?
  sellerId    String?
  price       Float?
  currency    String   @default("GBP")
  isPromoted  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  venue    Venue?    @relation(fields: [venueId], references: [id])
  seller   Seller?   @relation(fields: [sellerId], references: [id])
  likes    Like[]
  comments Comment[]
  
  @@map("posts")
}

model Like {
  id     String @id @default(cuid())
  userId String
  postId String
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  @@unique([userId, postId])
  @@map("likes")
}

model Comment {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  content   String
  parentId  String?  // For reply threads
  createdAt DateTime @default(now())
  
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  post     Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies  Comment[] @relation("CommentReplies")
  
  @@map("comments")
}

model ChatThread {
  id          String   @id @default(cuid())
  name        String?
  isGroup     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  participants ThreadParticipant[]
  messages     ChatMessage[]
  
  @@map("chat_threads")
}

model ThreadParticipant {
  id       String @id @default(cuid())
  threadId String
  userId   String
  joinedAt DateTime @default(now())
  
  thread ChatThread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  user   User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([threadId, userId])
  @@map("thread_participants")
}

model ChatMessage {
  id        String   @id @default(cuid())
  threadId  String
  senderId  String
  content   String
  type      String   @default("text") // "text", "image", "location", "activity"
  metadata  Json?    // For activity shares, location data, etc.
  createdAt DateTime @default(now())
  readBy    String[] // Array of user IDs who have read this message
  
  thread ChatThread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  sender User       @relation("SentChatMessages", fields: [senderId], references: [id])
  
  @@map("chat_messages")
}
